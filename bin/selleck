#!/usr/bin/env node
var fs      = require('fs'),
    path    = require('path'),

    selleck   = require('selleck'),
    fileutils = require('selleck/fileutils'),
    util      = require('selleck/util'), // selleck's util, not Node's util.

    arg,
    args     = [], // leftover args after params are parsed out of argv
    argv     = process.argv.slice(2), // get rid of the leading 'node' arg
    docPaths = [],
    log      = selleck.log,

    nextArg,

    // Default values for command line options.
    options  = {
        out     : './docs',
        template: selleck.defaultTemplate
    },

    templateLayouts,
    templateMeta,
    templatePages,
    templatePartials,

    help = [
        "Generates YUI user documentation, mustache-style.",
        "",
        "Usage: selleck [options] [path]",
        "",
        "Options:",
        "  -o, --out <path>       Write generated files to this output path.",
        "  -s, --server [port]    Run Selleck as a web server for real-time previews of",
        "                         changes while editing docs.",
        "  -t, --template <path>  Use the specified template instead of the default.",
        "  -h, --help             Display this help message."
    ].join('\n');

// Process command line parameters.
while ((arg = argv.shift())) {
    // If this isn't a parameter, push it onto the leftover args stack and move
    // on.
    if (arg.indexOf('-') !== 0) {
        args.push(arg);
    }

    switch (arg) {
    case '--help':
    case '-h':
        console.log(help);
        process.exit();
        break;

    case '--output':
    case '--out':
    case '-o':
        options.out = argv.shift();
        break;

    case '--server':
    case '-s':
        options.server = true;

        if ((nextArg = argv.shift())) {
            if (nextArg.search(/^\d+$/) === -1) {
                // Not a port number; put the argument back on the argv array.
                argv.unshift(nextArg);
            } else {
                options.serverPort = +nextArg;
            }
        }
        break;

    case '--template':
    case '-t':
        options.template = argv.shift();
        break;
    }
}

// First leftover arg (if any) is the root path; if no arg, then use the current
// directory.
options.rootPath = args.shift() || process.cwd();

// If running as a server, start the server instead of continuing.
if (options.server) {
    require('selleck/server')(options);
} else {
    // Traverse the root path and look for directories containing a doc.json
    // file and an index.mustache file. These will be treated as documentation
    // directories and parsed.
    docPaths = selleck.findDocPaths(options.rootPath);

    // Load global template metadata, layouts, partials, and pages.
    templateLayouts  = selleck.getLayouts(options.template);
    templateMeta     = selleck.getMetadata(options.template);
    templatePartials = selleck.getPartials(options.template);
    templatePages    = selleck.getPages(options.template);

    // Generate global docs.
    log('Generating global docs', 'info');

    selleck.generate(options.template, options.out, {
        layouts  : templateLayouts,
        meta     : templateMeta,
        partials : templatePartials,
        pages    : templatePages,
        skipLoad : true, // Don't reload stuff from the input dir.
        validator: globalValidator
    });

    // Generate component docs.
    docPaths.forEach(function(docPath) {
        log('Generating docs for ' + docPath, 'info');

        selleck.generate(docPath, options.out, {
            component: true,
            layouts  : templateLayouts,
            meta     : templateMeta,
            partials : templatePartials,
            pages    : templatePages,
            validator: componentValidator
        });
    });

    log('Done! Docs were written to: ' + options.out, 'info');
}

// -- Functions ----------------------------------------------------------------
function componentValidator(data) {
    // Validate the component name.
    if (!data.meta.name) {
        log('Component name not specified; skipping: ' + docPath, 'error');
        return false;
    }

    if (data.meta.name.search(/^[\w\-]+$/) === -1) {
        log('Invalid component name: ' + data.meta.name + '; skipping: ' + docPath, 'error');
        return false;
    }
}

function globalValidator(data) {
    if (!data.meta.projectName) {
        log('Project name not specified: ' + options.template, 'error');
        process.exit(1);
    }
}
